<?xml version="1.0" encoding="utf-8"?>
<odoo>

    <!-- Автоматизація для ролевої системи бюджетування -->

    <!-- Автоматичне призначення ролей при створенні бюджету -->
    <record id="budget_plan_auto_assign_roles" model="base.automation">
        <field name="name">Автопризначення ролей для нових бюджетів</field>
        <field name="model_id" ref="budget.model_budget_plan"/>
        <field name="state">code</field>
        <field name="trigger">on_create</field>
        <field name="code">
# Автоматичне призначення ролей якщо налаштовано
for record in records:
    if record.cbo_id and record.budget_type_id and not record.use_role_based_approval:
        mapping_data = env['budget.role.mapping'].get_roles_for_budget(record)
        if mapping_data:
            record.write(mapping_data)
            record.write({'use_role_based_approval': True})
        </field>
        <field name="active">True</field>
    </record>

    <!-- Сповіщення при зміні ролей -->
    <record id="budget_plan_role_change_notification" model="base.automation">
        <field name="name">Сповіщення про зміну ролей</field>
        <field name="model_id" ref="budget.model_budget_plan"/>
        <field name="state">code</field>
        <field name="trigger">on_write</field>
        <field name="filter_domain">[('use_role_based_approval', '=', True)]</field>
        <field name="code">
# Перевіряємо чи змінились ролі
role_fields = ['budget_creator_role_id', 'budget_reviewer_role_id', 'budget_approver_role_id']

for record in records:
    old_values = env.context.get('params', {}).get('old_values', {})
    role_changed = False

    for field in role_fields:
        if field in old_values:
            role_changed = True
            break

    if role_changed and record.responsible_user_id:
        # Створюємо активність про зміну ролей
        env['mail.activity'].create({
            'res_model': 'budget.plan',
            'res_id': record.id,
            'activity_type_id': env.ref('mail.mail_activity_data_todo').id,
            'user_id': record.responsible_user_id.id,
            'summary': 'Зміна ролей в бюджеті',
            'note': f'Ролі було змінено в бюджеті {record.display_name}',
            'date_deadline': fields.Date.today()
        })
        </field>
        <field name="active">True</field>
    </record>

    <!-- Валідація при переходах статусів -->
    <record id="budget_plan_state_validation" model="base.automation">
        <field name="name">Валідація ролей при зміні статусу</field>
        <field name="model_id" ref="budget.model_budget_plan"/>
        <field name="state">code</field>
        <field name="trigger">on_write</field>
        <field name="filter_domain">[('use_role_based_approval', '=', True)]</field>
        <field name="code">
# Валідація при зміні статусу
for record in records:
    old_values = env.context.get('params', {}).get('old_values', {})

    if 'state' in old_values:
        old_state = old_values['state']
        new_state = record.state

        # Базова валідація переходів
        valid_transitions = {
            'draft': ['planning'],
            'planning': ['coordination', 'draft'],
            'coordination': ['approved', 'revision'],
            'revision': ['planning'],
            'approved': ['executed'],
            'executed': ['closed']
        }

        allowed_states = valid_transitions.get(old_state, [])
        if new_state not in allowed_states:
            raise UserError(f'Неприпустимий перехід з стану {old_state} в {new_state}')
        </field>
        <field name="active">True</field>
    </record>

    <!-- Автоматична синхронізація відповідальних осіб -->
    <record id="budget_plan_sync_responsible" model="base.automation">
        <field name="name">Синхронізація відповідальних на основі ролей</field>
        <field name="model_id" ref="budget.model_budget_plan"/>
        <field name="state">code</field>
        <field name="trigger">on_write</field>
        <field name="filter_domain">[('use_role_based_approval', '=', True)]</field>
        <field name="code">
# Синхронізація відповідальних осіб
for record in records:
    # Встановлюємо відповідальних на основі поточних виконавців ролей
    if record.current_creator_ids and not record.responsible_user_id:
        record.responsible_user_id = record.current_creator_ids[0]

    if record.current_reviewer_ids and not record.coordinator_user_id:
        record.coordinator_user_id = record.current_reviewer_ids[0]

    if record.current_approver_ids and not record.approver_user_id:
        record.approver_user_id = record.current_approver_ids[0]
        </field>
        <field name="active">True</field>
    </record>

</odoo>